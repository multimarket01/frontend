import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ɵgetDOM as _getDOM, BrowserModule, ɵBrowserDomAdapter as _BrowserDomAdapter } from '@angular/platform-browser';
import * as i0 from '@angular/core';
import { destroyPlatform, VERSION, createPlatform, Component, NgModule, ApplicationRef } from '@angular/core';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';

function createRootElement() {
    const document = TestBed.inject(DOCUMENT);
    const root = _getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
function removeRootElement() {
    const root = document.getElementsByTagName('app-root').item(0);
    try {
        document.body.removeChild(root);
    }
    catch { }
}
function destroyPlatformBeforeBootstrappingTheNewOne(freshUrl) {
    destroyPlatform();
    resetLocationToUrl(freshUrl);
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    const version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
function resetLocationToUrl(freshUrl) {
    window.history.replaceState({}, 'Test', freshUrl);
}
function freshPlatform(fn) {
    let resolve = null;
    let reject = null;
    let whenDoneIsCalledPromise = null;
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        });
    }
    return async function testWithAFreshPlatform() {
        try {
            const freshUrl = '/';
            destroyPlatformBeforeBootstrappingTheNewOne(freshUrl);
            if (hasDoneArgument) {
                await fn((error) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve();
                    }
                });
                await whenDoneIsCalledPromise;
            }
            else {
                await fn();
            }
        }
        finally {
            resetPlatformAfterBootstrapping();
        }
    };
}

class NgxsTestComponent {
    ngOnInit() { }
    ngAfterViewInit() { }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgxsTestComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    /** @nocollapse */ static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.0.0", type: NgxsTestComponent, isStandalone: true, selector: "app-root", ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgxsTestComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'app-root',
                    template: ''
                }]
        }] });

class NgxsTestModule {
    static ngDoBootstrap(app) {
        app.bootstrap(NgxsTestComponent);
    }
    /** @nocollapse */ static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgxsTestModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    /** @nocollapse */ static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.0.0", ngImport: i0, type: NgxsTestModule, imports: [BrowserModule, NgxsTestComponent] }); }
    /** @nocollapse */ static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgxsTestModule, imports: [BrowserModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.0", ngImport: i0, type: NgxsTestModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [BrowserModule, NgxsTestComponent]
                }]
        }] });

function loggedError(message) {
    return ['error', [expect.objectContaining({ message })]];
}
function skipConsoleLogging(fn, consoleRecorder = []) {
    const consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation((...args) => {
            consoleRecorder.push(['log', args]);
        }),
        jest.spyOn(console, 'warn').mockImplementation((...args) => {
            consoleRecorder.push(['warn', args]);
        }),
        jest.spyOn(console, 'error').mockImplementation((...args) => {
            consoleRecorder.push(['error', args]);
        }),
        jest.spyOn(console, 'info').mockImplementation((...args) => {
            consoleRecorder.push(['info', args]);
        })
    ];
    function restoreSpies() {
        consoleSpies.forEach(spy => spy.mockRestore());
    }
    let restoreSpyAsync = false;
    try {
        const returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return returnValue.finally(() => restoreSpies());
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}

class NgxsTestBed {
    static configureTestingStates(options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        skipConsoleLogging(() => TestBed.configureTestingModule({
            imports: [
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),
                ...(options.imports || [])
            ]
        }).compileComponents());
        NgxsTestBed.ngxsBootstrap();
        return {
            get store() {
                return TestBed.inject(Store);
            },
            get getTestBed() {
                return TestBed;
            }
        };
    }
    static ngxsBootstrap() {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    }
    static resetTestBed() {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting(), {
            teardown: { destroyAfterEach: true }
        });
    }
    static createRootNode(selector = 'app-root') {
        const document = TestBed.inject(DOCUMENT);
        const adapter = new _BrowserDomAdapter();
        const root = adapter.createElement(selector);
        document.body.appendChild(root);
    }
}

/**
 * Generated bundle index. Do not edit.
 */

export { NgxsTestBed, freshPlatform, loggedError, skipConsoleLogging };
//# sourceMappingURL=ngxs-store-internals-testing.mjs.map
